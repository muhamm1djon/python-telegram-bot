import logging
import os
import tempfile
import yt_dlp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext
)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8485637506:AAHmTDFOuWkinhLDNvlWns8jVbh7KkcU45o"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üéß –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º—É–∑—ã–∫—É –∏ –≤–∏–¥–µ–æ.\n\n"
        "üîç /music <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ø–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ YouTube\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏–∑ TikTok, VK, Instagram –∏–ª–∏ YouTube ‚Äî —è —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ."
    )


# ---------- –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ ----------
def music(update: Update, context: CallbackContext):
    query = " ".join(context.args)
    if not query:
        update.message.reply_text("–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: /music Imagine Dragons Believer")
        return

    update.message.reply_text(f"üéµ –ò—â—É –º—É–∑—ã–∫—É: {query}")

    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'default_search': 'ytsearch1',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': os.path.join(tempfile.gettempdir(), '%(title)s.%(ext)s'),
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(query, download=True)
            file_path = ydl.prepare_filename(info).replace(".webm", ".mp3")

        title = info.get("title", "–ú—É–∑—ã–∫–∞")
        with open(file_path, "rb") as f:
            update.message.reply_audio(f, title=title)

        os.remove(file_path)
    except Exception as e:
        logger.error(e)
        update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º—É–∑—ã–∫–∏.")


# ---------- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ ----------
def download_video(update: Update, context: CallbackContext):
    url = update.message.text.strip()

    if not any(s in url for s in ["tiktok.com", "instagram.com", "vk.com", "youtube.com", "youtu.be"]):
        return update.message.reply_text("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –∏–∑ TikTok, Instagram, VK –∏–ª–∏ YouTube!")

    update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    temp_dir = tempfile.mkdtemp()
    try:
        ydl_opts = {
            'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
            'format': 'mp4/best',
            'quiet': True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            file_path = ydl.prepare_filename(info)
            title = info.get("title", "–í–∏–¥–µ–æ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(file_path, 'rb') as video_file:
            update.message.reply_video(video_file, caption=f"üé¨ {title}")

    except Exception as e:
        logger.error(e)
        update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            for f in os.listdir(temp_dir):
                os.remove(os.path.join(temp_dir, f))
            os.rmdir(temp_dir)
        except Exception:
            pass


# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("music", music))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, download_video))

    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    updater.idle()


if __name__ == '__main__':
    main()